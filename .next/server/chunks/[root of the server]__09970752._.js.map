{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Prantik/Desktop/ai-career-coach-master/lib/inngest/client.js"],"sourcesContent":["import { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({\n  id: \"career-coach\", // Unique app ID\n  name: \"Career Coach\",\n  credentials: {\n    gemini: {\n      apiKey: process.env.GEMINI_API_KEY,\n    },\n  },\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,IAAI,kIAAA,CAAA,UAAO,CAAC;IACjC,IAAI;IACJ,MAAM;IACN,aAAa;QACX,QAAQ;YACN,QAAQ,QAAQ,GAAG,CAAC,cAAc;QACpC;IACF;AACF","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Prantik/Desktop/ai-career-coach-master/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n\n// globalThis.prisma: This global variable ensures that the Prisma client instance is\n// reused across hot reloads during development. Without this, each time your application\n// reloads, a new instance of the Prisma client would be created, potentially leading\n// to connection issues.\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C;IACzC,WAAW,MAAM,GAAG;AACtB,EAEA,qFAAqF;CACrF,yFAAyF;CACzF,qFAAqF;CACrF,wBAAwB","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Prantik/Desktop/ai-career-coach-master/lib/inngest/function.js"],"sourcesContent":["import { db } from \"@/lib/prisma\";\nimport { inngest } from \"./client\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\nexport const generateIndustryInsights = inngest.createFunction(\n  { name: \"Generate Industry Insights\" },\n  { cron: \"0 0 * * 0\" }, // Run every Sunday at midnight\n  async ({ event, step }) => {\n    const industries = await step.run(\"Fetch industries\", async () => {\n      return await db.industryInsight.findMany({\n        select: { industry: true },\n      });\n    });\n\n    for (const { industry } of industries) {\n      const prompt = `\n          Analyze the current state of the ${industry} industry and provide insights in ONLY the following JSON format without any additional notes or explanations:\n          {\n            \"salaryRanges\": [\n              { \"role\": \"string\", \"min\": number, \"max\": number, \"median\": number, \"location\": \"string\" }\n            ],\n            \"growthRate\": number,\n            \"demandLevel\": \"High\" | \"Medium\" | \"Low\",\n            \"topSkills\": [\"skill1\", \"skill2\"],\n            \"marketOutlook\": \"Positive\" | \"Neutral\" | \"Negative\",\n            \"keyTrends\": [\"trend1\", \"trend2\"],\n            \"recommendedSkills\": [\"skill1\", \"skill2\"]\n          }\n          \n          IMPORTANT: Return ONLY the JSON. No additional text, notes, or markdown formatting.\n          Include at least 5 common roles for salary ranges.\n          Growth rate should be a percentage.\n          Include at least 5 skills and trends.\n        `;\n\n      const res = await step.ai.wrap(\n        \"gemini\",\n        async (p) => {\n          return await model.generateContent(p);\n        },\n        prompt\n      );\n\n      const text = res.response.candidates[0].content.parts[0].text || \"\";\n      const cleanedText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n      const insights = JSON.parse(cleanedText);\n\n      await step.run(`Update ${industry} insights`, async () => {\n        await db.industryInsight.update({\n          where: { industry },\n          data: {\n            ...insights,\n            lastUpdated: new Date(),\n            nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n          },\n        });\n      });\n    }\n  }\n);\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IAAE,OAAO;AAAmB;AAE5D,MAAM,2BAA2B,0HAAA,CAAA,UAAO,CAAC,cAAc,CAC5D;IAAE,MAAM;AAA6B,GACrC;IAAE,MAAM;AAAY,GACpB,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;IACpB,MAAM,aAAa,MAAM,KAAK,GAAG,CAAC,oBAAoB;QACpD,OAAO,MAAM,+GAAA,CAAA,KAAE,CAAC,eAAe,CAAC,QAAQ,CAAC;YACvC,QAAQ;gBAAE,UAAU;YAAK;QAC3B;IACF;IAEA,KAAK,MAAM,EAAE,QAAQ,EAAE,IAAI,WAAY;QACrC,MAAM,SAAS,CAAC;2CACqB,EAAE,SAAS;;;;;;;;;;;;;;;;;QAiB9C,CAAC;QAEH,MAAM,MAAM,MAAM,KAAK,EAAE,CAAC,IAAI,CAC5B,UACA,OAAO;YACL,OAAO,MAAM,MAAM,eAAe,CAAC;QACrC,GACA;QAGF,MAAM,OAAO,IAAI,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,IAAI;QACjE,MAAM,cAAc,KAAK,OAAO,CAAC,oBAAoB,IAAI,IAAI;QAE7D,MAAM,WAAW,KAAK,KAAK,CAAC;QAE5B,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,EAAE,SAAS,SAAS,CAAC,EAAE;YAC5C,MAAM,+GAAA,CAAA,KAAE,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC9B,OAAO;oBAAE;gBAAS;gBAClB,MAAM;oBACJ,GAAG,QAAQ;oBACX,aAAa,IAAI;oBACjB,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;gBACvD;YACF;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Prantik/Desktop/ai-career-coach-master/app/api/inngest/route.js"],"sourcesContent":["import { serve } from \"inngest/next\";\n\nimport { inngest } from \"@/lib/inngest/client\";\nimport { generateIndustryInsights } from \"@/lib/inngest/function\";\nimport { helloWorld } from \"@/lib/inngest/function\";\n\nexport const { GET, POST, PUT } = serve({\n  client: inngest,\n  functions: [generateIndustryInsights],\n});\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;;;;;AAGO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAA,GAAA,iIAAA,CAAA,QAAK,AAAD,EAAE;IACtC,QAAQ,0HAAA,CAAA,UAAO;IACf,WAAW;QAAC,4HAAA,CAAA,2BAAwB;KAAC;AACvC","debugId":null}}]
}